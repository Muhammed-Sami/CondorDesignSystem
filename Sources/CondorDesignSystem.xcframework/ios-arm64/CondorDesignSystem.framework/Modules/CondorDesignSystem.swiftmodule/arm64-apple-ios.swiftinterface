// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target arm64-apple-ios13.4 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CondorDesignSystem
@_exported import CondorDesignSystem
import Foundation
import Swift
import SwiftUI
import UIKit
import _Concurrency
public enum TextStyle {
  case headline1
  case headline2
  case headline3
  case subtitle1
  case subtitle2
  case body1Regular
  case body2Regular
  case body1Medium
  case body2Medium
  case buttonLarge
  case buttonMedium
  case buttonSmall
  case link1
  case link2
  case caption
  case overline
  public static func == (a: CondorDesignSystem.TextStyle, b: CondorDesignSystem.TextStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension CondorDesignSystem.TextStyle {
  public var font: UIKit.UIFont {
    get
  }
  public var swiftUIFont: SwiftUI.Font {
    get
  }
}
public enum ButtonSize {
  case small, medium, large
  public static func == (a: CondorDesignSystem.ButtonSize, b: CondorDesignSystem.ButtonSize) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ButtonStatus {
  case normal(CondorDesignSystem.ButtonType)
  case pressed(CondorDesignSystem.ButtonType)
  case disabled(CondorDesignSystem.ButtonType)
}
public enum ButtonType {
  case primary
  case secondary
  case ghost
  case text
  public static func == (a: CondorDesignSystem.ButtonType, b: CondorDesignSystem.ButtonType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct CondorButton : SwiftUI.ButtonStyle {
  public init(type: CondorDesignSystem.ButtonType, size: CondorDesignSystem.ButtonSize)
  public func makeBody(configuration: CondorDesignSystem.CondorButton.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s18CondorDesignSystem0A6ButtonV8makeBody13configurationQr7SwiftUI0D18StyleConfigurationV_tF", 0) __
}
public enum Color {
  case neutral50
  case neutral100
  case neutral200
  case neutral300
  case neutral400
  case neutral500
  case neutral600
  case neutral700
  case neutral800
  case neutral900
  case primary50
  case primary100
  case primary200
  case primary300
  case primary400
  case primary500
  case primary600
  case primary700
  case primary800
  case primary900
  case warning50
  case warning100
  case warning200
  case warning300
  case warning400
  case warning500
  case warning600
  case warning700
  case warning800
  case warning900
  case success50
  case success100
  case success200
  case success300
  case success400
  case success500
  case success600
  case success700
  case success800
  case success900
  case energy50
  case energy100
  case energy200
  case energy300
  case energy400
  case energy500
  case energy600
  case energy700
  case energy800
  case energy900
  case error50
  case error100
  case error200
  case error300
  case error400
  case error500
  case error600
  case error700
  case error800
  case error900
  case shades0
  case shades100
  public static func == (a: CondorDesignSystem.Color, b: CondorDesignSystem.Color) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension UIKit.UIColor {
  convenience public init?(color: CondorDesignSystem.Color)
}
extension SwiftUI.Color {
  public init(color: CondorDesignSystem.Color)
}
public enum AppTarget {
  case forsale
  case q8car
  public static func == (a: CondorDesignSystem.AppTarget, b: CondorDesignSystem.AppTarget) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func initializeDesignSystem(target: CondorDesignSystem.AppTarget)
extension SwiftUI.View {
  public func addBorder<S>(_ content: S, width: CoreGraphics.CGFloat = 1, cornerRadius: CoreGraphics.CGFloat) -> some SwiftUI.View where S : SwiftUI.ShapeStyle
  
}
extension CondorDesignSystem.TextStyle : Swift.Equatable {}
extension CondorDesignSystem.TextStyle : Swift.Hashable {}
extension CondorDesignSystem.ButtonSize : Swift.Equatable {}
extension CondorDesignSystem.ButtonSize : Swift.Hashable {}
extension CondorDesignSystem.ButtonType : Swift.Equatable {}
extension CondorDesignSystem.ButtonType : Swift.Hashable {}
extension CondorDesignSystem.Color : Swift.Equatable {}
extension CondorDesignSystem.Color : Swift.Hashable {}
extension CondorDesignSystem.AppTarget : Swift.Equatable {}
extension CondorDesignSystem.AppTarget : Swift.Hashable {}
